backup=Backup the database and all assets by running the backup:db and backup:assets tasks.
backup\:assets=Backup all assets under public/system. File is created as :rails_root/../system.tgz
backup\:db=Backup the current database. Timestamped file is created as :rails_root/../db-name-timestamp.sql
cucumber=Alias for cucumber:ok
cucumber\:all=Run all features
cucumber\:ok=Run features that should pass
cucumber\:wip=Run features that are being worked on
db\:abort_if_pending_migrations=Raises an error if there are pending migrations
db\:bootstrap=Loads a schema.rb file into the database and then loads the initial database fixtures.
db\:bootstrap\:load=Load initial database fixtures (in db/bootstrap/*.yml) into the current environment's database. Load specific fixtures using FIXTURES=x,y
db\:charset=Retrieves the charset for the current environment's database
db\:collation=Retrieves the collation for the current environment's database
db\:create=Create the database defined in config/database.yml for the current RAILS_ENV
db\:create\:all=Create all the local databases defined in config/database.yml
db\:drop=Drops the database for the current RAILS_ENV
db\:drop\:all=Drops all the local databases defined in config/database.yml
db\:fixtures\:identify=Search for a fixture given a LABEL or ID. Specify an alternative path (eg. spec/fixtures) using FIXTURES_PATH=spec/fixtures.
db\:fixtures\:load=Load fixtures into the current environment's database.  Load specific fixtures using FIXTURES=x,y. Load from subdirectory in test/fixtures using FIXTURES_DIR=z. Specify an alternative path (eg. spec/fixtures) using FIXTURES_PATH=spec/fixtures.
db\:indexes\:missing=Prints a list of unindexed foreign keys so you can index them
db\:load_config=
db\:migrate=Migrate the database through scripts in db/migrate and update db/schema.rb by invoking db:schema:dump. Target specific version with VERSION=x. Turn off output with VERBOSE=false.
db\:migrate\:down=Runs the "down" for a given migration VERSION.
db\:migrate\:redo=Rollbacks the database one migration and re migrate up. If you want to rollback more than one step, define STEP=x. Target specific version with VERSION=x.
db\:migrate\:reset=Resets your database using your migrations for the current environment
db\:migrate\:up=Runs the "up" for a given migration VERSION.
db\:reset=Drops and recreates the database from db/schema.rb for the current environment and loads the seeds.
db\:rollback=Rolls the schema back to the previous version. Specify the number of steps with STEP=n
db\:schema\:dump=Create a db/schema.rb file that can be portably used against any DB supported by AR
db\:schema\:load=Load a schema.rb file into the database
db\:seed=Load the seed data from db/seeds.rb
db\:sessions\:clear=Clear the sessions table
db\:sessions\:create=Creates a sessions migration for use with ActiveRecord::SessionStore
db\:setup=Create the database, load the schema, and initialize with the seed data
db\:shell=Launches the database shell using the values defined in config/database.yml
db\:structure\:dump=Dump the database structure to a SQL file
db\:test\:clone=Recreate the test database from the current environment's database schema
db\:test\:clone_structure=Recreate the test databases from the development structure
db\:test\:load=Recreate the test database from the current schema.rb
db\:test\:prepare=Check for pending migrations and load the test schema
db\:test\:purge=Empty the test database
db\:validate_models=Run model validations on all model records in database
db\:version=Retrieves the current schema version number
default=Run all tests and features
deploy=Push the latest revision into production (delegates to remote:deploy)
doc=
doc/api=
doc/api/index.html=
doc/app=
doc/app/index.html=
doc\:app=Build the RDOC HTML Files
doc\:clobber=
doc\:clobber_app=Remove rdoc products
doc\:clobber_plugins=Remove plugin documentation
doc\:clobber_rails=Remove rdoc products
doc\:guides=Generate Rails guides
doc\:plugins=Generate documentation for all installed plugins
doc\:plugins\:auto_complete=Generate documentation for the auto_complete plugin
doc\:plugins\:limerick_rake=Generate documentation for the limerick_rake plugin
doc\:plugins\:validation_reflection=Generate documentation for the validation_reflection plugin
doc\:rails=Build the RDOC HTML Files
doc\:reapp=Force a rebuild of the RDOC files
doc\:rerails=Force a rebuild of the RDOC files
environment=
features=
find_mass_assignment=Find potential mass assignment vulnerabilities
gems=List the gems that this rails application depends on
gems\:base=
gems\:build=Build any native extensions for unpacked gems
gems\:build\:force=Force the build of all gems
gems\:install=Installs all required gems.
gems\:refresh_specs=Regenerate gem specifications in correct format.
gems\:unpack=Unpacks all required gems into vendor/gems.
gems\:unpack\:dependencies=Unpacks all required gems and their dependencies into vendor/gems.
git\:branch\:production=Branch origin/production into BRANCH locally.
git\:diff\:production=Show the difference between origin/staging and origin/production.
git\:diff\:staging=Show the difference between current branch and origin/staging.
git\:pull\:suspenders=Pull updates from suspenders, the thoughtbot rails template.
git\:push\:production=Reset origin's production branch to origin's staging branch.
git\:push\:staging=Reset origin's staging branch to be the current branch.
haml\:all_html2haml=Convert all HTML files to Haml.
hoptoad\:deploy=Notify Hoptoad of a new deploy.
hoptoad\:log_stdout=
hoptoad\:test=Verify your gem installation by sending a test exception to the hoptoad service
log\:clear=Truncates all *.log files in log/ to zero bytes
middleware=Prints out your Rack middleware stack
notes=Enumerate all annotations
notes\:custom=Enumerate a custom annotation, specify with ANNOTATION=WTFHAX
notes\:fixme=Enumerate all FIXME annotations
notes\:optimize=Enumerate all OPTIMIZE annotations
notes\:todo=Enumerate all TODO annotations
rails\:freeze\:edge=Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0
rails\:freeze\:gems=Lock this application to the current gems (by unpacking them into vendor/rails)
rails\:template=Applies the template supplied by LOCATION=/path/to/template
rails\:unfreeze=Unlock this application from freeze of gems or edge and return to a fluid use of system gems
rails\:update=Update both configs, scripts and public/javascripts from Rails
rails\:update\:application_controller=Rename application.rb to application_controller.rb
rails\:update\:configs=Update config/boot.rb from your current rails install
rails\:update\:generate_dispatchers=Generate dispatcher files in RAILS_ROOT/public
rails\:update\:javascripts=Update your javascripts from your current rails install
rails\:update\:scripts=Add new scripts to the application script/ directory
rails_env=
rails_two\:rename_views=Renames all .rhtml views to .html.erb, .rjs to .js.rjs, .rxml to .xml.builder and .haml to .html.haml
remote\:cleanup=Removes unused releases from the releases directory.
remote\:cold_deploy=Used only for deploying when the spinner isn't running.
remote\:deploy=A macro-task that updates the code, fixes the symlink, and restarts the application servers.
remote\:deploy_with_migrations=Similar to deploy, but it runs the migrate task on the new release before updating the symlink.
remote\:diff_from_last_deploy=Displays the diff between HEAD and what was last deployed.
remote\:disable_web=Disable the web server by writing a "maintenance.html" file to the web servers.
remote\:enable_web=Re-enable the web server by deleting any "maintenance.html" file.
remote\:exec=Execute a specific action using capistrano
remote\:invoke=A simple task for performing one-off commands that may not require a full task to be written for them.
remote\:migrate=Run the migrate rake task.
remote\:restart=Restart the FCGI processes on the app server.
remote\:rollback=A macro-task that rolls back the code and restarts the application servers.
remote\:rollback_code=Rollback the latest checked-out version to the previous one by fixing the symlinks and deleting the current release from all servers.
remote\:setup=Set up the expected application directory structure on all boxes
remote\:shell=Begin an interactive Capistrano session.
remote\:show_tasks=Enumerate and describe every available task.
remote\:spinner=Start the spinner daemon for the application (requires script/spin).
remote\:symlink=Update the 'current' symlink to point to the latest version of the application's code.
remote\:update=Updates the code and fixes the symlink under a transaction
remote\:update_code=Update all servers with the latest release of the source code.
remote\:update_current=Update the currently released version of the software directly via an SCM update operation
rollback=Rollback to the release before the current release in production (delegates to remote:rollback)
routes=Print out all defined routes in match order, with names. Target specific controller with CONTROLLER=x.
sass\:all_css2sass=Convert all CSS files to Sass.
sass\:all_sass2css=Convert all Sass files to CSS.
secret=Generate a crytographically secure secret key. This is typically used to generate a secret for cookie sessions.
stats=Report code statistics (KLOCs, etc) from the application
svn\:add=Adds all files with an svn status flag of '?'
svn\:delete=Deletes all files with an svn status flag of '!'
svn\:log=Writes the log file to doc/svn_log.txt
svn\:update_svn_ignore=Updates svn:ignore from .svnignore
test=Run all unit, functional and integration tests
test\:benchmark=Run tests for benchmarkdb:test:prepare / Benchmark the performance tests
test\:coverage=Measures test coverage
test\:functionals=Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional
test\:integration=Run tests for integrationdb:test:prepare / Run the integration tests in test/integration
test\:plugins=Run tests for pluginsenvironment / Run the plugin tests in vendor/plugins/*/**/test (or specify with PLUGIN=name)
test\:profile=Run tests for profiledb:test:prepare / Profile the performance tests
test\:recent=Run tests for recentdb:test:prepare / Test recent changes
test\:uncommitted=Run tests for uncommitteddb:test:prepare / Test changes since last checkin (only Subversion and Git)
test\:units=Run tests for unitsdb:test:prepare / Run the unit tests in test/unit
time\:zones\:all=Displays names of all time zones recognized by the Rails TimeZone class, grouped by offset. Results can be filtered with optional OFFSET parameter, e.g., OFFSET=-6
time\:zones\:local=Displays names of time zones recognized by the Rails TimeZone class with the same offset as the system local time
time\:zones\:us=Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset. Results can be filtered with optional OFFSET parameter, e.g., OFFSET=-6
tmp\:cache\:clear=Clears all files and directories in tmp/cache
tmp\:clear=Clear session, cache, and socket files from tmp/
tmp\:create=Creates tmp directories for sessions, cache, sockets, and pids
tmp\:pids\:clear=Clears all files in tmp/pids
tmp\:sessions\:clear=Clears all files in tmp/sessions
tmp\:sockets\:clear=Clears all files in tmp/sockets
